# .github/workflows/deploy-firmware.yml

name: Build and Deploy Firmware

# Memicu workflow saat ada push ke branch 'main'
on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Langkah 1: Checkout kode
      - name: Checkout repository
        uses: actions/checkout@v3

      # Langkah 2: Generate secrets.h untuk build
      - name: Generate secrets.h for CI build
        run: |
          mkdir -p include
          cat <<EOF > include/secrets.h
          #pragma once
          #define SECRET_WIFI_SSID "${{ secrets.SECRET_WIFI_SSID }}"
          #define SECRET_WIFI_PASS "${{ secrets.SECRET_WIFI_PASS }}"
          #define SECRET_AP_SSID "${{ secrets.SECRET_AP_SSID }}"
          #define SECRET_AP_PASS "${{ secrets.SECRET_AP_PASS }}"
          #define SECRET_MQTT_BROKER "${{ secrets.SECRET_MQTT_BROKER }}"
          #define SECRET_MQTT_USER "${{ secrets.SECRET_MQTT_USER }}"
          #define SECRET_MQTT_PASS "${{ secrets.SECRET_MQTT_PASS }}"
          #define SECRET_SUPABASE_URL "${{ secrets.SECRET_SUPABASE_URL }}"
          #define SECRET_SUPABASE_KEY "${{ secrets.SECRET_SUPABASE_KEY }}"
          EOF

      # Langkah 3: Setup PlatformIO (tidak berubah)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install PlatformIO
        run: pip install -U platformio

      # Langkah 4: Build firmware (tidak berubah)
      - name: Build PlatformIO Project
        run: pio run

      # Langkah 5: Dapatkan informasi versi dari file config.h
      - name: Get Version Info from config.h
        id: version_info
        run: |
          # Membaca baris yang berisi FIRMWARE_VERSION dan mengekstrak nilainya
          FIRMWARE_VERSION=$(grep '#define FIRMWARE_VERSION' include/config.h | sed -e 's/.*"\(.*\)".*/\1/')
          RELEASE_NOTES=$(git log -1 --pretty=%B | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          FIRMWARE_URL="${{ secrets.SUPABASE_URL }}/storage/v1/object/firmware/firmware.bin"

          echo "version=${FIRMWARE_VERSION}" >> $GITHUB_OUTPUT
          echo "notes=${RELEASE_NOTES}" >> $GITHUB_OUTPUT
          echo "url=${FIRMWARE_URL}" >> $GITHUB_OUTPUT

          echo "Firmware version found: ${FIRMWARE_VERSION}"

      # Langkah 6: Upload firmware.bin ke Supabase (tidak berubah)
      - name: Upload Firmware to Supabase Storage
        run: |
          FIRMWARE_PATH=$(find .pio/build -name "firmware.bin" | head -n 1)
          curl -X POST \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "Content-Type: application/octet-stream" \
            -H "x-upsert: true" \
            --data-binary "@$FIRMWARE_PATH" \
            "${{ steps.version_info.outputs.url }}"

      # Langkah 7: Masukkan entri baru ke tabel database (tidak berubah)
      - name: Insert Version Record into Supabase Database
        run: |
          curl -X POST \
            "${{ secrets.SUPABASE_URL }}/rest/v1/firmware_versions" \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
                  "version": "${{ steps.version_info.outputs.version }}",
                  "release_notes": "${{ steps.version_info.outputs.notes }}",
                  "file_url": "${{ steps.version_info.outputs.url }}"
                }'
